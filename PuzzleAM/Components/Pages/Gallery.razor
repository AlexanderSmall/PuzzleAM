@page "/gallery"
@rendermode InteractiveServer
@using System
@using System.Linq
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="gallery-page">
    <header class="gallery-header">
        <h1>My Puzzle Gallery</h1>
        <p class="gallery-subtitle">
            Here is a collection of AWESOME puzzles you have completed.
        </p>
    </header>

    @if (puzzles is null)
    {
        <div class="gallery-status">Loading your masterpieces...</div>
    }
    else if (!puzzles.Any())
    {
        <div class="gallery-status empty">You have not completed a puzzle yetâ€”time to create your first!</div>
    }
</div>

@if (puzzles?.Any() == true)
{
    <div class="gallery-grid">
        @foreach (var p in puzzles)
        {
            <article class="gallery-card">
                <div class="gallery-image">
                    <button type="button" class="gallery-remove" @onclick="() => RemovePuzzleAsync(p.Id)">
                        <span aria-hidden="true">&times;</span>
                        <span class="sr-only">Remove puzzle</span>
                    </button>
                    <img src="@p.ImageDataUrl" alt="Completed puzzle" loading="lazy" />
                </div>
                <div class="gallery-details">
                    <div class="details-row">
                        <span class="details-label">Pieces</span>
                        <span class="details-value">@p.PieceCount</span>
                    </div>
                    <div class="details-row">
                        <span class="details-label">Completion Time</span>
                        <span class="details-value">@p.TimeToComplete.ToString(@"hh\:mm\:ss")</span>
                    </div>
                </div>
            </article>
        }
    </div>
}

@code {
    private List<GalleryPuzzle>? puzzles;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (userId is not null)
            {
                var results = await Db.CompletedPuzzles
                    .AsNoTracking()
                    .Where(p => p.UserId == userId)
                    .OrderByDescending(p => p.Id)
                    .Select(p => new CompletedPuzzleData(
                        p.Id,
                        p.PieceCount,
                        p.TimeToComplete,
                        p.ContentType,
                        p.ImageData))
                    .ToListAsync();

                puzzles = results
                    .Where(p => p.ImageData is { Length: > 0 })
                    .Select(p => new GalleryPuzzle(
                        p.Id,
                        p.PieceCount,
                        p.TimeToComplete,
                        BuildImageDataUrl(p.ImageData!, p.ContentType)))
                    .ToList();
            }
            else
            {
                puzzles = new List<GalleryPuzzle>();
            }
        }
        else
        {
            puzzles = new List<GalleryPuzzle>();
        }
    }

    private async Task RemovePuzzleAsync(int puzzleId)
    {
        if (puzzles is null || userId is null)
        {
            return;
        }

        var puzzle = await Db.CompletedPuzzles
            .FirstOrDefaultAsync(p => p.Id == puzzleId && p.UserId == userId);

        if (puzzle is null)
        {
            return;
        }

        Db.CompletedPuzzles.Remove(puzzle);
        await Db.SaveChangesAsync();

        puzzles = puzzles
            .Where(p => p.Id != puzzleId)
            .ToList();
    }

    private static string BuildImageDataUrl(byte[] imageData, string contentType)
    {
        var resolvedContentType = string.IsNullOrWhiteSpace(contentType) ? "image/png" : contentType;
        return $"data:{resolvedContentType};base64,{Convert.ToBase64String(imageData)}";
    }

    private sealed record CompletedPuzzleData(int Id, int PieceCount, TimeSpan TimeToComplete, string ContentType, byte[]? ImageData);

    private sealed record GalleryPuzzle(int Id, int PieceCount, TimeSpan TimeToComplete, string ImageDataUrl);
}
